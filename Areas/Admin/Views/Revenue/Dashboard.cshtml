@{
    ViewData["Title"] = "Dashboard Thống Kê Doanh Thu";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    :root {
        --primary-color: #e52836;
        --secondary-color: #f3f4f6;
        --dark-color: #1e293b;
        --light-color: #ffffff;
        --text-dark: #1e293b;
        --text-light: #64748b;
        --border-color: #e2e8f0;
        --hover-color: #f8fafc;
    }

    body {
        background-color: #f5f5f5;
        margin: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Main content styles */
    .main-content {
        flex-grow: 1;
        overflow-y: auto;
        padding: 1rem 2rem;
        background-color: #f8f9fa;
        min-height: 100vh;
    }

    /* Header inside content */
    .header {
        margin-bottom: 1.5rem;
    }

        .header h1 {
            font-size: 1.8rem;
            font-weight: 600;
            color: var(--text-dark);
            margin-top: 30px;
        }

    .controls {
        margin-bottom: 2rem;
    }

    .filter-group {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: flex-end;
    }

    .filter-item {
        display: flex;
        flex-direction: column;
        min-width: 150px;
    }

        .filter-item label {
            font-weight: 600;
            margin-bottom: 0.3rem;
        }

    select,
    input[type="date"] {
        padding: 0.3rem 0.5rem;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        font-size: 0.9rem;
    }

    .btn {
        background-color: var(--primary-color);
        color: var(--light-color);
        border: none;
        padding: 0.5rem 1rem;
        font-weight: 600;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s ease;
        height: 38px;
    }

        .btn:hover {
            background-color: #b92129;
        }

    .summary-stats {
        display: flex;
        gap: 1rem;
        margin-bottom: 2rem;
        flex-wrap: wrap;
    }

    .stat-card {
        background-color: var(--light-color);
        flex: 1;
        min-width: 180px;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        box-shadow: 0 1px 4px rgb(0 0 0 / 0.1);
        text-align: center;
    }

        .stat-card h4 {
            margin: 0 0 0.5rem;
            color: var(--text-dark);
            font-weight: 600;
        }

        .stat-card .value {
            font-size: 1.4rem;
            font-weight: 700;
            color: var(--primary-color);
        }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .card {
        background-color: var(--light-color);
        border-radius: 8px;
        padding: 1rem 1.5rem;
        box-shadow: 0 1px 4px rgb(0 0 0 / 0.1);
    }

        .card h3 {
            margin-top: 0;
            margin-bottom: 1rem;
            font-weight: 600;
            color: var(--text-dark);
        }

    .chart-container {
        position: relative;
        height: 300px;
    }

    .data-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.9rem;
    }

        .data-table th,
        .data-table td {
            padding: 0.75rem 1rem;
            border: 1px solid var(--border-color);
            text-align: left;
            vertical-align: middle;
        }

        .data-table th {
            background-color: var(--dark-color);
            color: var(--light-color);
        }

        .data-table tbody tr:hover {
            background-color: var(--hover-color);
        }

    .export-controls {
        margin-top: 1rem;
        display: flex;
        gap: 0.75rem;
    }

    .btn-secondary {
        background-color: #6c757d;
        border: none;
        padding: 0.4rem 1rem;
        color: #fff;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 600;
        transition: background-color 0.2s ease;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }
</style>

<div class="main-content">
    <div class="header mt-4">
        <h1 class="mb-4">Báo cáo và thống kê doanh thu</h1>
        <p>Xem thống kê doanh thu theo tháng và năm, xuất báo cáo nhanh.</p>
    </div>

    <div class="controls">
        <form id="filter-form" class="filter-group">
            <div class="filter-item">
                <label for="month">Chọn Tháng</label>
                <select id="month" name="month" class="form-select">
                    <option value="">-- Chọn tháng --</option>
                    @for (int m = 1; m <= 12; m++)
                    {
                        <option value="@m">@m</option>
                    }
                </select>
            </div>

            <div class="filter-item">
                <label for="year">Chọn Năm</label>
                <select id="year" name="year" class="form-select">
                    <option value="">-- Chọn năm --</option>
                    @for (int y = 2023; y <= DateTime.Now.Year; y++)
                    {
                        <option value="@y">@y</option>
                    }
                </select>
            </div>

            <div class="filter-item">
                <button type="submit" class="btn">Lọc</button>
            </div>
        </form>
    </div>

    <div class="summary-stats">
        <div class="stat-card">
            <h4>Tổng doanh thu tháng</h4>
            <div class="value" id="totalRevenueMonth">0 đ</div>
        </div>
        <div class="stat-card">
            <h4>Tổng doanh thu năm</h4>
            <div class="value" id="totalRevenueYear">0 đ</div>
        </div>
        <div class="stat-card">
            <h4>Số đơn hàng tháng</h4>
            <div class="value" id="orderCountMonth">0</div>
        </div>
    </div>

    <div class="dashboard-grid">
        <section class="card">
            <h3>Biểu đồ doanh thu theo tháng</h3>
            <div class="chart-container">
                <canvas id="revenueChart"></canvas>
            </div>
        </section>

        <section class="card">
            <h3>Chi tiết doanh thu</h3>
            <table class="data-table" id="revenueTable">
                <thead>
                    <tr>
                        <th>Ngày</th>
                        <th>Số đơn</th>
                        <th>Doanh thu</th>
                    </tr>
                </thead>
                <tbody>
                    <tr><td colspan="3" style="text-align:center;">Chưa có dữ liệu</td></tr>
                </tbody>
            </table>

            <div class="export-controls">
                <button class="btn btn-secondary" id="exportExcel">Xuất Excel</button>
                <button class="btn btn-secondary" id="exportPDF">Xuất PDF</button>
            </div>
        </section>
    </div>
</div>

<script>
    // Sample data generation
    function generateSampleData(type, startDate, endDate) {
        const data = [];
        const start = new Date(startDate);
        const end = new Date(endDate);

        if (type === 'day') {
            for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
                const revenue = Math.floor(Math.random() * 10000000) + 5000000;
                const orders = Math.floor(Math.random() * 100) + 50;
                data.push({
                    date: new Date(d).toLocaleDateString('vi-VN'),
                    revenue: revenue,
                    orders: orders,
                    average: Math.floor(revenue / orders),
                    growth: (Math.random() * 20 - 10).toFixed(1)
                });
            }
        } else if (type === 'month') {
            for (let i = 0; i < 12; i++) {
                const revenue = Math.floor(Math.random() * 300000000) + 150000000;
                const orders = Math.floor(Math.random() * 3000) + 1500;
                data.push({
                    date: `Tháng ${i + 1}/2024`,
                    revenue: revenue,
                    orders: orders,
                    average: Math.floor(revenue / orders),
                    growth: (Math.random() * 30 - 15).toFixed(1)
                });
            }
        } else if (type === 'year') {
            for (let year = 2020; year <= 2024; year++) {
                const revenue = Math.floor(Math.random() * 3000000000) + 1500000000;
                const orders = Math.floor(Math.random() * 30000) + 15000;
                data.push({
                    date: `Năm ${year}`,
                    revenue: revenue,
                    orders: orders,
                    average: Math.floor(revenue / orders),
                    growth: (Math.random() * 40 - 20).toFixed(1)
                });
            }
        }

        return data.slice(0, 20); // Limit to 20 records for display
    }

    // Format currency
    function formatCurrency(amount) {
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(amount);
    }

    // Format number
    function formatNumber(num) {
        return new Intl.NumberFormat('vi-VN').format(num);
    }

    // Chart variables
    let revenueChart;

    // Initialize charts
    function initCharts() {
        // Revenue Chart
        const revenueCtx = document.getElementById('revenueChart').getContext('2d');
        revenueChart = new Chart(revenueCtx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Doanh Thu (₫)',
                    data: [],
                    borderColor: '#667eea',
                    backgroundColor: 'rgba(102, 126, 234, 0.1)',
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return formatNumber(value) + '₫';
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return 'Doanh thu: ' + formatCurrency(context.parsed.y);
                            }
                        }
                    }
                }
            }
        });
    }

    // Update dashboard
    function updateDashboard() {
        const month = document.getElementById('month').value;
        const year = document.getElementById('year').value;
        let startDate = new Date(year || 2024, month ? parseInt(month) - 1 : 0, 1);
        let endDate = new Date(year || 2024, month ? parseInt(month) : 11, 31);

        // Generate new data
        const data = generateSampleData('day', startDate, endDate);

        // Update summary stats
        const totalRevenue = data.reduce((sum, item) => sum + item.revenue, 0);
        const totalOrders = data.reduce((sum, item) => sum + item.orders, 0);

        document.getElementById('totalRevenueMonth').textContent = formatCurrency(totalRevenue);
        document.getElementById('totalRevenueYear').textContent = formatCurrency(totalRevenue * 12);
        document.getElementById('orderCountMonth').textContent = formatNumber(totalOrders);

        // Update revenue chart
        revenueChart.data.labels = data.map(item => item.date);
        revenueChart.data.datasets[0].data = data.map(item => item.revenue);
        revenueChart.update();

        // Update table
        const tableBody = document.getElementById('revenueTable').querySelector('tbody');
        tableBody.innerHTML = '';

        data.forEach(item => {
            const row = tableBody.insertRow();
            row.innerHTML = `
                <td>${item.date}</td>
                <td>${formatNumber(item.orders)}</td>
                <td>${formatCurrency(item.revenue)}</td>
            `;
        });
    }

    // Export functions
    function exportData(format) {
        alert(`Xuất dữ liệu định dạng ${format.toUpperCase()}...\nChức năng này sẽ được triển khai trong backend ASP.NET`);
    }

    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function() {
        initCharts();
        document.getElementById('filter-form').addEventListener('submit', function(e) {
            e.preventDefault();
            updateDashboard();
        });
        updateDashboard();
    });

    // Auto-update every 30 seconds (for demo)
    setInterval(updateDashboard, 30000);
</script>